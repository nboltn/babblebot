{% extends 'common/base' %}
{%- block htmlClass %}funky{%- endblock htmlClass %}

{%- block body %}
<div id='app'>
  <div id='navbar'>
    <div class='pane active' v-on:click='pane("dashboard", $event)'>Dashboard</div>
    <div class='pane' v-on:click='pane("settings", $event)'>Settings</div>
    <div class='pane' v-on:click='pane("commands", $event)'>Commands</div>
    <div class='pane' v-on:click='pane("notices", $event)'>Notices</div>
    <div class='pane' v-on:click='pane("moderation", $event)'>Moderation</div>
    <div class='pane' v-on:click='pane("keywords", $event)'>Keywords</div>
    <div class='pane' v-on:click='pane("songrequests", $event)'>Song Requests</div>
    <div class='pane' v-on:click='pane("integrations", $event)'>Integrations</div>
    <div class='pane' v-on:click='pane("logs", $event)'>Logs</div>
    <div class='pane' v-on:click='logout'>Logout</div>
  </div><div id='panes'>
    <div class='pane active' id='dashboard'>
      <div class='section' id='info'>
        <div class='title is-4'>Stream Info</div>
        <form id='title-form' endpoint='/api/title' v-on:submit='submitField'>
          <div class='field title-field'>
            <label class='label'>Title</label>
            <div class='control has-icons-right'>
              <input class='input' type='text' name='title' id='status' v-model='fields.status'>
              <span class='icon is-small is-right hidden'>
                <i class='fas fa-exclamation-triangle'></i>
              </span>
            </div>
            <a class='button is-link' v-on:click='triggerSubmitF("title")'><i class='far fa-check-circle'></i></a>
            <p class='help is-danger hidden'>{%raw%}{{error}}{%endraw%}</p>
          </div>
        </form>
        <form id='game-form' endpoint='/api/game' v-on:submit='submitField'>
          <div class='field game'>
            <label class='label'>Game</label>
            <div class='control has-icons-right'>
              <input class='input' type='text' name='game' id='game' v-model='fields.game'>
              <span class='icon is-small is-right hidden'>
                <i class='fas fa-exclamation-triangle'></i>
              </span>
            </div>
            <a class='button is-link' v-on:click='triggerSubmitF("game")'><i class='far fa-check-circle'></i></a>
            <p class='help is-danger hidden'>{%raw%}{{error}}{%endraw%}</p>
          </div>
        </form>
      </div>
      <div class='section' id='account'>
        <div class='title is-4'>Account</div>
        <form id='password-form' endpoint='/api/password' v-on:submit='submitField'>
          <div class='field password'>
            <label class='label'>Password</label>
            <div class='control has-icons-right'>
              <input class='input' type='password' name='password' v-model='fields.password'>
              <span class='icon is-small is-right hidden'>
                <i class='fas fa-exclamation-triangle'></i>
              </span>
            </div>
            <a class='button is-link' v-on:click='triggerSubmitF("password")'><i class='far fa-check-circle'></i></a>
            <p class='help is-danger hidden'>{%raw%}{{error}}{%endraw%}</p>
          </div>
        </form>
      </div>
      <div class='section' id='bot' v-if='integrations.patreon.subscribed == "true"'>
        <div class='title is-4'>Bot</div>
        <form>
          <div class='field twitch'>
            <label class='label'>Custom Username</label>
            <div class='control has-icons-right'>
              <input class='input' type='text' name='username' v-model='fields.username' readonly>
              <span class='icon is-small is-right hidden'>
                <i class='fas fa-exclamation-triangle'></i>
              </span>
            </div>
            <a class='button is-link' v-on:click='connectTwitch()'><i class='fas fa-plug'></i></a>
            <p class='help is-danger hidden'>{%raw%}{{error}}{%endraw%}</p>
          </div>
        </form>
      </div>
    </div>
    <div class='pane' id='commands'>
      <div class='title is-4'>Commands</div>
      <table class='table is-striped'>
        <tbody>
          <tr class='new'>
            <td class='name'><input class='input' placeholder='!newcommand' v-model='newCmd.name'></td>
            <td class='content'><input class='input' placeholder='command message' v-model='newCmd.message'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='submitNewCmd'><i class='fas fa-save'></i></span>
                <span class='icon success'><i class='fas fa-check-circle hidden animated'></i></span>
              </div>
            </td>
          </tr>
          <tr v-for='(message, name) in commands'>
            <td class='name'><div class='text'>{%raw%}{{name}}{%endraw%}</div></td>
            <td class='content'><input class='input' v-model='commands[name]'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='saveCommand(name, $event)'><i class='fas fa-save'></i></span>
                <span class='icon trash' v-on:click='trashCommand(name)'><i class='fas fa-trash'></i></span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class='pane' id='notices'>
      <div class='title is-4'>Notices</div>
      <table class='table is-striped'>
        <tbody>
          <tr class='new'>
            <td class='name'><input class='input' placeholder='interval' v-model='newNotice.interval'></td>
            <td class='content'><input class='input' placeholder='command' v-model='newNotice.command'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='submitNewNotice'><i class='fas fa-save'></i></span>
                <span class='icon success'><i class='fas fa-check-circle hidden animated'></i></span>
              </div>
            </td>
          </tr>
          <template v-for='(commands, interval) in notices'>
            <tr v-for='command in commands'>
              <td class='name'><div class='text'>{%raw%}{{interval}}{%endraw%}</div></td>
              <td class='content'><input class='input' readonly v-bind:value='command'></td>
              <td class='actions'>
                <div class='icons'>
                  <span class='icon trash' v-on:click='trashNotice(interval, command)'><i class='fas fa-trash'></i></span>
                </div>
              </td>
            </tr>
          </template>
        </tbody>
      </table>
    </div>
    <div class='pane' id='moderation'>
      <div class='title is-4'>Blacklist</div>
      <table class='table is-striped' id='blacklist'>
        <tbody>
          <tr class='new'>
            <td class='regex'><input class='input' placeholder='regex' v-model='newBlacklist.regex'></td>
            <td class='length'><input class='input' placeholder='timeout length' v-model='newBlacklist.length'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='submitNewBlacklist'><i class='fas fa-save'></i></span>
                <span class='icon success'><i class='fas fa-check-circle hidden animated'></i></span>
              </div>
            </td>
          </tr>
          <tr v-for='(data, key) in blacklist'>
            <td class='regex'><input class='input' v-model='blacklist[key].regex'></td>
            <td class='length'><input class='input' v-model='blacklist[key].length'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='saveBlacklist(key, $event)'><i class='fas fa-save'></i></span>
                <span class='icon trash' v-on:click='trashBlacklist(key)'><i class='fas fa-trash'></i></span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class='pane' id='keywords'>
      <div class='title is-4'>Keywords</div>
      <table class='table is-striped' id='keytable'>
        <tbody>
          <tr class='new'>
            <td class='regex'><input class='input' placeholder='regex' v-model='newKeyword.regex'></td>
            <td class='command'><input class='input' placeholder='command' v-model='newKeyword.command'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='submitNewKeyword'><i class='fas fa-save'></i></span>
                <span class='icon success'><i class='fas fa-check-circle hidden animated'></i></span>
              </div>
            </td>
          </tr>
          <tr v-for='(data, key) in keywords'>
            <td class='regex'><input class='input' v-model='keywords[key].regex'></td>
            <td class='command'><input class='input' v-model='keywords[key].cmd'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='saveKeyword(key, $event)'><i class='fas fa-save'></i></span>
                <span class='icon trash' v-on:click='trashKeyword(key)'><i class='fas fa-trash'></i></span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class='pane' id='settings'>
      <div class='title is-4'>Settings</div>
      <table class='table is-striped'>
        <tbody>
          <tr class='new'>
            <td class='name'><input class='input' placeholder='new:setting' v-model='newSetting.name'></td>
            <td class='content'><input class='input' placeholder='value' v-model='newSetting.value'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='submitNewSetting'><i class='fas fa-save'></i></span>
                <span class='icon success'><i class='fas fa-check-circle hidden animated'></i></span>
              </div>
            </td>
          </tr>
          <tr v-for='(setting, name) in settings'>
            <td class='name'><div class='text'>{%raw%}{{name}}{%endraw%}</div></td>
            <td class='content'><input class='input' v-model='settings[name]'></td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon save' v-on:click='saveSetting(name, $event)'><i class='fas fa-save'></i></span>
                <span class='icon trash' v-on:click='trashSetting(name)'><i class='fas fa-trash'></i></span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class='pane' id='songrequests'>
      <div class='title is-4'>Song Requests</div>
      <div id='player'>
        <audio id='audio'></audio>
      </div>
      <table class='table is-striped' id='songreqs'>
        <tbody>
          <tr v-for='(req, index) in songreqs'>
            <td class='song'>{%raw%}{{req[1]}}{%endraw%}</td>
            <td class='nick'>{%raw%}{{req[2]}}{%endraw%}</td>
            <td class='actions'>
              <div class='icons'>
                <span class='icon trash' v-on:click='trashSong(index, false)'><i class='fas fa-trash'></i></span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class='pane' id='logs'>
      <div class='title is-4'>Logs</div>
      <form id='logs-form' endpoint='/api/logs' v-on:submit='submitField'>
        <div class='field logs'>
          <label class='label'>Fetch Recent Lines</label>
          <div class='control has-icons-right'>
            <input class='input' type='text' name='num' id='lognum' placeholder='32'>
            <span class='icon is-small is-right hidden'>
              <i class='fas fa-exclamation-triangle'></i>
            </span>
          </div>
          <a class='button is-link' v-on:click='triggerSubmitF("logs")'><i class='far fa-file-alt'></i></a>
          <p class='help is-danger hidden'>{%raw%}{{error}}{%endraw%}</p>
        </div>
      </form>
      <div id='logviewer'></div>
    </div>
    <div class='pane' id='integrations'>
      <div class="integration">
        <div class='title is-4'>Twitch</div>
        <div><a class='button is-success' style='width:105px' v-on:click='refreshTwitch()' v-on:mouseover='twitchOver()' v-on:mouseleave='twitchLeave()'>{%raw%}{{twitchText}}{%endraw%}</a></div>
      </div>
      <div class="integration">
        <div class='title is-4'>Patreon</div>
        <div v-if='integrations.patreon.connected == "true"'><a class='button is-success' style='width:105px' v-on:click='connectPatreon()' v-on:mouseover='patreonOver()' v-on:mouseleave='patreonLeave()'>{%raw%}{{patreonText}}{%endraw%}</a></div>
        <div v-else><a class='button is-link'  v-on:click='connectPatreon()'>Connect</a></div>
      </div>
      <div class="integration">
        <div class='title is-4'>Spotify</div>
        <div v-if='integrations.spotify.connected == "true"'><a class='button is-success' style='width:105px' v-on:click='connectSpotify()' v-on:mouseover='spotifyOver()' v-on:mouseleave='spotifyLeave()'>{%raw%}{{spotifyText}}{%endraw%}</a></div>
        <div v-else><a class='button is-link'  v-on:click='connectSpotify()'>Connect</a></div>
      </div>
    </div>
  </div>
</div>

<script type='text/javascript'>
  u.ready = function (fn) { document.readyState !== 'loading'? fn(): u(document).on('DOMContentLoaded', fn) }

  const app = new Vue({
    el: '#app',
    data: {
      fields: {},
      commands: {},
      notices: {},
      settings: {},
      blacklist: {},
      keywords: {},
      integrations: { spotify: { token: '', connected: false }, patreon: { connected: false, subscribed: false } },
      songreqs: [],
      newCmd: { name: '', message: '' },
      newNotice: { interval: '', command: ''},
      newSetting: { name: '', value: '' },
      newBlacklist: { regex: '', length: '' },
      newKeyword: { regex: '', command: '' },
      error: '',
      logs: 'test',
      player: null,
      twitchText: 'Connected',
      patreonText: 'Connected',
      spotifyText: 'Connected'
    },
    created: function(){
      var vm = this;
      window.vm = vm;
      const fetch_data = async () => {
        const data = await fetch('/api/data', {
          method: 'GET',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
        }).then(res => res.json());

        vm.channel = data.channel;
        vm.state = data.state;
        vm.fields = data.fields;
        vm.songreqs = data.songreqs;
        vm.integrations = data.integrations;
        vm.commands = _.sortKeysBy(data.commands);
        vm.notices = _.sortKeysBy(data.notices);
        vm.settings = _.sortKeysBy(data.settings);
        vm.blacklist = _.sortKeysBy(data.blacklist);
        vm.keywords = _.sortKeysBy(data.keywords);

        vm.player = new MediaElementPlayer('audio');
        var player = document.getElementById('audio');
        player.addEventListener('ended', function(e) { vm.trashSong(0, true) });
        if (vm.songreqs.length > 0) { vm.player.setSrc(vm.songreqs[0][0]) }
      }

      fetch_data();
    },
    methods: {
      logout: function(){
        const submitForm = async () => {
          await fetch('/api/logout');
          location.reload(true);
        }
        submitForm();
      },
      pane: function(id, e){
        u('#navbar .pane').removeClass('active')
        u('#panes .pane').removeClass('active')
        u(e.target).addClass('active')
        u('#' + id).addClass('active')
      },
      triggerSubmitF: function(id){
        u('#' + id + '-form').trigger('submit')
      },
      submitField: function(e){
        var vm = this;
        const submitForm = async () => {
          const body = u(e.target).serialize();
          const data = await fetch(e.target.attributes.endpoint.value, {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: body
          }).then(res => res.json());

          const id = '#' + e.target.attributes.id.value
          u('form .field span.icon').addClass('hidden');
          u('form .field .help.is-danger').addClass('hidden');
          u('form .field input').removeClass('is-danger');
          vm.error = '';

          if (data['field']) {
            var field = id + ' .field.'.concat(data.field);
            var icon = field.concat(' span.icon');
            var help = field.concat(' .help.is-danger');
            var input = field.concat(' input');
            var message = field.concat(' .help');
          }

          if (data.success) {
            u(id + ' .field .is-link').addClass('success');
            setTimeout(function(){
              u(id + ' .field .is-link').removeClass('success');
            }, 4000);
            if (data['success_value']) {
              Vue.set(vm.fields, data.field, data.success_value);
              if (data.field == "logs") {
                u('#logviewer').html('');
                var str = "<pre><code class='language-none'>" + data.success_value + "</code></pre>";
                u('#logviewer').append(str);
                Prism.highlightAll(true);
              }
            }
            if (e.target.attributes.endpoint.value == '/api/password') {
              vm.fields.password = '';
            }
          } else {
            u(icon).removeClass('hidden');
            u(help).removeClass('hidden');
            u(input).addClass('is-danger');
            vm.error = data.error_message;
          }
        }

        submitForm();
      },
      refreshTwitch: function(e){
        var url = "https://id.twitch.tv/oauth2/authorize?force_verify=true&response_type=code&state=" + this.state + "&client_id=" + this.integrations.twitch.client_id + "&redirect_uri=https://www.babblebot.io/callbacks/twitch&scope=user_read+channel_editor+channel_commercial+channel_subscriptions+channel_check_subscription+analytics:read:extensions+clips:edit+bits:read+analytics:read:games+user:edit:broadcast+user:read:broadcast+chat:read"
        location.href = url
      },
      connectTwitch: function(e){
        var url = "https://id.twitch.tv/oauth2/authorize?force_verify=true&response_type=code&state=" + this.state + "&client_id=" + this.integrations.twitch.client_id + "&redirect_uri=https://www.babblebot.io/callbacks/twitch&scope=user_read+channel:moderate+chat:read+chat:edit+whispers:read+whispers:edit"
        location.href = url
      },
      connectPatreon: function(e){
        var url = "https://www.patreon.com/oauth2/authorize?force_verify=true&client_id=" + this.integrations.patreon.client_id + "&state=" + this.channel + "&response_type=code&redirect_uri=https%3A%2F%2Fwww.babblebot.io%2Fcallbacks%2Fpatreon&scope=identity%20identity.memberships"
        location.href = url;
      },
      connectSpotify: function(e){
        var url = "https://accounts.spotify.com/authorize?force_verify=true&client_id=" + this.integrations.spotify.client_id + "&response_type=code&redirect_uri=https%3A%2F%2Fwww.babblebot.io%2Fcallbacks%2Fspotify&scope=user-read-currently-playing"
        location.href = url;
      },
      twitchOver: function(e){
        this.twitchText = "Refresh"
      },
      twitchLeave: function(e){
        this.twitchText = "Connected"
      },
      patreonOver: function(e){
        this.patreonText = "Refresh"
      },
      patreonLeave: function(e){
        this.patreonText = "Connected"
      },
      spotifyOver: function(e){
        this.spotifyText = "Refresh"
      },
      spotifyLeave: function(e){
        this.spotifyText = "Connected"
      },
      submitNewCmd: function(e){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/new_command', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "command=" + encodeURIComponent(vm.newCmd.name) + "&message=" + encodeURIComponent(vm.newCmd.message)
          }).then(res => res.json());

          if (data.success) {
            vm.newCmd.name = '';
            vm.newCmd.message = '';

            u('#commands tr.new .icons .success i').addClass('fadeIn');
            u('#commands tr.new .icons .success i').removeClass('hidden');
            setTimeout(function(){
              u('#commands tr.new .icons .success i').removeClass('fadeIn');
              u('#commands tr.new .icons .success i').addClass('fadeOut');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.commands = _.sortKeysBy(data.commands);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      saveCommand: function(name, e){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/save_command', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "command=" + encodeURIComponent(name) + "&message=" + encodeURIComponent(vm.commands[name])
          }).then(res => res.json());

          if (data.success) {
            var target = u(e.target);
            while (!target.hasClass('actions')) { target = target.parent() }
            target.siblings('.content').children('input').addClass('is-success');
            setTimeout(function(){
              target.siblings('.content').children('input').removeClass('is-success');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.commands = _.sortKeysBy(data.commands);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      trashCommand: function(name){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/trash_command', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "command=" + encodeURIComponent(name)
          }).then(res => res.json());

          if (data.success) {
            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.commands = _.sortKeysBy(data.commands);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      submitNewNotice: function(interval, command){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/new_notice', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "interval=" + encodeURIComponent(vm.newNotice.interval) + "&command=" + encodeURIComponent(vm.newNotice.command)
          }).then(res => res.json());

          if (data.success) {
            vm.newNotice.interval = '';
            vm.newNotice.command = '';

            u('#notices tr.new .icons .success i').addClass('fadeIn');
            u('#notices tr.new .icons .success i').removeClass('hidden');
            setTimeout(function(){
              u('#notices tr.new .icons .success i').removeClass('fadeIn');
              u('#notices tr.new .icons .success i').addClass('fadeOut');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.notices = _.sortKeysBy(data.notices);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      trashNotice: function(interval, command){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/trash_notice', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "interval=" + encodeURIComponent(interval) + "&command=" + encodeURIComponent(command)
          }).then(res => res.json());

          if (data.success) {
            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.notices = _.sortKeysBy(data.notices);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      submitNewSetting: function(e){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/save_setting', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "name=" + encodeURIComponent(vm.newSetting.name) + "&value=" + encodeURIComponent(vm.newSetting.value)
          }).then(res => res.json());

          if (data.success) {
            vm.newSetting.name = '';
            vm.newSetting.value = '';

            u('#settings tr.new .icons .success i').addClass('fadeIn');
            u('#settings tr.new .icons .success i').removeClass('hidden');
            setTimeout(function(){
              u('#settings tr.new .icons .success i').removeClass('fadeIn');
              u('#settings tr.new .icons .success i').addClass('fadeOut');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.settings = _.sortKeysBy(data.settings);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      saveSetting: function(name, e){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/save_setting', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "name=" + encodeURIComponent(name) + "&value=" + encodeURIComponent(vm.settings[name])
          }).then(res => res.json());

          if (data.success) {
            var target = u(e.target);
            while (!target.hasClass('actions')) { target = target.parent() }
            target.siblings('.content').children('input').addClass('is-success');
            setTimeout(function(){
              target.siblings('.content').children('input').removeClass('is-success');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.settings = _.sortKeysBy(data.settings);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      trashSetting: function(name){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/trash_setting', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "name=" + encodeURIComponent(name)
          }).then(res => res.json());

          if (data.success) {
            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.settings = _.sortKeysBy(data.settings);
                _ => {}
            }
            fetch_data();
          }
        }

        submitForm();
      },
      submitNewBlacklist: function(e){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/new_blacklist', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "regex=" + encodeURIComponent(vm.newBlacklist.regex) + "&length=" + encodeURIComponent(vm.newBlacklist.length)
          }).then(res => res.json());

          if (data.success) {
            vm.newBlacklist.regex = '';
            vm.newBlacklist.length = '';

            u('#blacklist tr.new .icons .success i').addClass('fadeIn');
            u('#blacklist tr.new .icons .success i').removeClass('hidden');
            setTimeout(function(){
                _ => {}
              u('#blacklist tr.new .icons .success i').removeClass('fadeIn');
              u('#blacklist tr.new .icons .success i').addClass('fadeOut');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.blacklist = _.sortKeysBy(data.blacklist);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      saveBlacklist: function(key, e){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/save_blacklist', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "regex=" + encodeURIComponent(vm.blacklist[key].regex) + "&length=" + encodeURIComponent(vm.blacklist[key].length) + "&key=" + encodeURIComponent(key)
          }).then(res => res.json());

          if (data.success) {
            var target = u(e.target);
            while (!target.hasClass('actions')) { target = target.parent() }
            target.siblings('.regex').children('input').addClass('is-success');
            target.siblings('.length').children('input').addClass('is-success');
            setTimeout(function(){
              target.siblings('.regex').children('input').removeClass('is-success');
              target.siblings('.length').children('input').removeClass('is-success');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.blacklist = _.sortKeysBy(data.blacklist);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      trashBlacklist: function(key){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/trash_blacklist', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "key=" + encodeURIComponent(key)
          }).then(res => res.json());

          if (data.success) {
            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.blacklist = _.sortKeysBy(data.blacklist);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      submitNewKeyword: function(e){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/new_keyword', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "regex=" + encodeURIComponent(vm.newKeyword.regex) + "&command=" + encodeURIComponent(vm.newKeyword.command)
          }).then(res => res.json());

          if (data.success) {
            vm.newKeyword.regex = '';
            vm.newKeyword.command = '';

            u('#keytable tr.new .icons .success i').addClass('fadeIn');
            u('#keytable tr.new .icons .success i').removeClass('hidden');
            setTimeout(function(){
                _ => {}
              u('#keytable tr.new .icons .success i').removeClass('fadeIn');
              u('#keytable tr.new .icons .success i').addClass('fadeOut');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.keywords = _.sortKeysBy(data.keywords);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      saveKeyword: function(key, e){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/save_keyword', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "regex=" + encodeURIComponent(vm.keywords[key].regex) + "&command=" + encodeURIComponent(vm.keywords[key].command) + "&key=" + encodeURIComponent(key)
          }).then(res => res.json());

          if (data.success) {
            var target = u(e.target);
            while (!target.hasClass('actions')) { target = target.parent() }
            target.siblings('.regex').children('input').addClass('is-success');
            target.siblings('.command').children('input').addClass('is-success');
            setTimeout(function(){
              target.siblings('.regex').children('input').removeClass('is-success');
              target.siblings('.command').children('input').removeClass('is-success');
            }, 4000);

            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.keywords = _.sortKeysBy(data.keywords);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      trashKeyword: function(key){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/trash_keyword', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "key=" + encodeURIComponent(key)
          }).then(res => res.json());

          if (data.success) {
            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.keywords = _.sortKeysBy(data.keywords);
            }
            fetch_data();
          }
        }

        submitForm();
      },
      trashSong: function(index, next){
        var vm = this;
        const submitForm = async () => {
          const data = await fetch('/api/trash_song', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' },
            body: "index=" + encodeURIComponent(index)
          }).then(res => res.json());

          if (data.success) {
            const fetch_data = async () => {
              const data = await fetch('/api/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'NoForward': '' }
              }).then(res => res.json());

              vm.songreqs = data.songreqs;

              if (index == 0 && vm.songreqs.length > 0) {
                vm.player.setSrc(vm.songreqs[0][0]);
                if (next) { vm.player.play() }
              }
            }
            fetch_data();
          }
        }

        submitForm();
      }
    }
  })

  _.mixin({
    'sortKeysBy': function (obj, comparator) {
        var keys = _.sortBy(_.keys(obj), function (key) {
            return comparator ? comparator(obj[key], key) : key;
        });

        return _.object(keys, _.map(keys, function (key) {
            return obj[key];
        }));
    }
  });
</script>
{%- endblock body %}
